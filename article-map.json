{"1000":{"id":1000,"title":"你离开了北京，从此只剩春秋冬","author":"庄天宇","timestamp":1579964175404,"markdownString":"### 你离开了北京，从此只剩春秋冬\n\n庄天宇 2019-04-12\n\n今天是3月20日，我正在去地铁站的车上，夏是我的朋友，他将在四月份离开北京，回南昌工作。我想，他离开当天，我会发一条朋友圈，把这篇文章链过去。\n\n#### 从前共你，促膝把酒倾通宵都不够\n\n我和夏认识不到一年，工作认识的。他比我晚入职一周，就在我旁边的工位，当时就是夏天。\n\n早上在食堂遇到，夏穿了件库里的T恤，吃着食堂的煎饺津津有味。我也是满头大汗，刚从西二旗地铁站骑车过来，端着早饭坐下。聊火箭会不会在季后赛遇到勇士，聊彼此。\n\n后来西部半决赛，火箭被勇士淘汰出局。我侧头对夏说了句\"舒服了\"，心里却不是滋味。那个赛季是火箭希望很大的赛季，最后还是被宇宙勇淘汰，下个赛季是未知的，那时候我还不知道新赛季哈登拿了得分王又很接近二连MVP。\n\n我是有些可惜，但对夏，对勇士的祝福是真的。学生时代就羡慕勒布朗的球迷，羡慕库里的球迷，有他们在仿佛就有了季后赛甚至总决赛的门票。但是这并不影响我们埋汰彼此喜欢的球员，甚至我会说哈登只会骗犯规，夏也说库里就会投三分不会别的，于是我们约了周六去华电打球，就在夏他家旁边：\n\n- 明天中午来我家吧，我给你做煎饺吃。\n- 这么牛逼呢？\n- 点外卖啊，小恒水饺，刚好送到就凉了，再煎一下。你吃啥馅儿的？\n\n饭后走到球场，华电球场那儿的水吧是自助的，拿几瓶水看看价目表多少钱，自己扫码付款就行。\n\n我拎了三大瓶脉动，扫码付款，听到夏说他来他来，我想着几瓶水谁买都一样，和夏同一时间付了款。两人大眼瞪小眼，付了双份的钱，只能又拿了三瓶大脉动。那天下午不记得球打得怎么样了，反正饮料是真的喝不完。\n\n晚上九点，明早提测，我们都依旧有一些已知的bug没有修复。正写着，夏扭头问了句：\n\n- 你这里是什么逻辑？\n- 你在改我的bug吗，这模块有点儿复杂，我之后自己改吧。\n\n继续写代码，过了会儿：\n\n- 我改好了，你还有哪儿没改的？\n\n事后我好多次提到帮我改bug这件事：\n\n- 你的bug太多了，我想着早点改完上线，我早点回家。\n\n夏是真的喜欢麦旋风，我也真的喜欢麦辣鸡腿堡。麦当劳真是个好地方，春节期间还出了杨超越封面的小食桶，里面有麦辣鸡翅、椒盐鸡翅和薯格。\n\n我们在周五晚上的西二旗的麦当劳畅谈工作生活，享受没有外面冬天冷的麦旋风。\n\n我们在春节放假后的下午，拖着行李箱在麦当劳聊新年计划。\n\n甚至在去吃火锅的路上也要在路过的麦当劳买两杯麦旋风吃。\n\n当然肯德基也会吃，那天我们买了冰淇淋吃，夏的草莓圣代，我的榴莲甜筒。我看着夏圣代上面满满的草莓酱：\n\n- 你那个酱，给我挖一勺。\n- 你可真不要脸。\n\n后来的一天早上，我买了肉酱+西红柿鸡蛋的河粉打包到工位吃。此时夏正在喝小米粥吃鸡蛋，冲我来了句：\n\n- 把你的肉酱给我挖一勺。\n\n我忽然反应过来，mmp！\n\n再后来的一天下午，和朋友们唱歌从KTV出来，去吃烧烤的路上。我和夏走在后面聊天，夏突然冒出一句：\n\n- 我有故事，你有北冰洋吗？\n\n#### 要走一刻，请不必诸多眷恋\n\n傍晚从公司骑车，我们去西三旗找杨明宇吃饭。路过后厂村路，跨过G6辅路，等了一个红绿灯，骑在建材城西路上。仿佛时间还在去年夏天，却不经意间已经过了一年。\n\n我和夏在夏天认识，也在夏天告别。\n\n李志有一首歌，\"你离开了南京，从此没有人和我说话\"。\n\n我想，夏离开了北京，北京从此只剩春秋冬了。\n\n#### 后记：\n\n我们生来就是孤独，\n\n我们生来就是孤单，\n\n不管你拥有什么，\n\n我们生来就是孤独。\n\n--来自李志的单曲《梵高先生》"},"1001":{"id":1001,"title":"如果想念有翅膀，它一定会飞","author":"庄天宇","timestamp":1579965326069,"markdownString":"### 如果想念有翅膀，它一定会飞\n\n庄天宇 2019-10-10\n\n如果想念有翅膀，\n\n它一定会飞到我成长的镇子上，那条胡同里平房的炉子旁。\n\n也或许会飘到我生活过的城市，冬天结满冰的马路上。\n\n也许在人们早起为上学的孩子做饭的清晨，\n\n也许在守着工作一天的人终于回到家的深夜，\n\n也许在这片想念漂浮在空中的某一个时刻。\n\n我还可以回到镇子的平房里，\n\n我也可以回到城市的马路上，\n\n可无论在哪里，这片想念只能飞，只能飞。\n\n我捉不到。\n\n我会在梦里梦到你，隔着公交车的车窗，隔着冬天的凉。"},"1002":{"id":1002,"title":"React Hooks: 使用 useEffect 调整页面布局","author":"庄天宇","timestamp":1579970924454,"markdownString":"### React Hooks: 使用 useEffect 调整页面布局\n\n#### 背景\n\n本项目期望兼容<code>PC / 移动端</code>，通过<code>百分比布局 + max-width</code>实现。\n\n常规页面为了保证 pc 端的体验，设置了<code>max-width: 800px</code>.\n\n如下：\n\n![](http://zhuangtianyu.com/image/1580018232368.png)\n\n项目中有如下的<code>编辑</code>页面，用于<code>增加/编辑</code>文章：\n\n![](http://zhuangtianyu.com/image/1580018279395.png)\n\n考虑<code>编辑</code>页面需要在编写<code>markdown</code>的同时，提供右侧的实时预览，所以将容器设置为<code>max-width: none</code>. 最大化地保证编写体验。\n\n于是在该页面的<code>index.scss</code>文件配置了<code>max-width: none</code>.\n\n随后问题来了，因为我在项目中手动实现了<code>css namespace</code>\n\n(纯粹是因为觉得没有必要在 css 环节安装其它依赖)\n\n所以对于通用容器样式的修改是全局的，<code>.container</code>即使在离开该页面后，依然保持<code>max-width: none</code>最大化宽度。\n\n虽然可以通过刷新页面的方式来解决，但那也太low了…\n\n#### 解决方案\n\n忽然想到之前看 react hooks 的文档时，<code>useEffect</code>钩子的说明：\n\n> Effect Hook 可以让你在函数组件中执行副作用操作，每个 effect 都可以返回一个清除函数。React 会在组件卸载的时候执行清除操作。\n\n于是代码变成了这个样子：\n\n```\n  useEffect(() => {\n    const nodeList = Array.from(document.querySelectorAll('.container'))\n    nodeList.forEach(node => {\n      const { maxWidth } = node.style\n      Object.assign(node, { maxWidth })\n      Object.assign(node.style, { maxWidth: 'none' })\n    })\n    return () => {\n      nodeList.forEach(node => {\n        const { maxWidth } = node\n        Object.assign(node.style, { maxWidth })\n      })\n    }\n  }, [])\n```\n\n逻辑如下:\n- 组件初始化时，遍历页面上的<code>.container</code>容器。\n- 记录原始<code>max-width</code>，修改当前样式为<code>max-width: none</code>.\n- 组件卸载时，根据之前记录的<code>max-width</code>值，进行还原操作。"},"1003":{"id":1003,"title":"使用 nginx 与 nodejs 搭建图片服务器","author":"庄天宇","timestamp":1580022865857,"markdownString":"## 使用 nginx 与 nodejs 搭建图片服务器\n\n庄天宇 2020-01-26\n\n### 需求背景\n\n期望在本项目的 markdown 文档预览中，引入图片资源，以优化阅读体验。\n\n所以需要一个图片服务器，来保存编辑文档时的图片文件。\n\n昨天异想天开，想着平日里自己使用<code>有道云笔记</code>比较多，\n\n那么为何不把图片上传到<code>有道云笔记</code>上面，然后引用<code>图片链接地址</code>来使用图片呢？\n\n这不就相当于把<code>有道云笔记</code>当作自己的图片服务器 === 白嫖。\n\n尝试之后发现，在开发环境与pc端的线上环境，都可以在文档发布后，正常加载图片。\n\n但是在手机端，图片无法正常被引用。随后定位到原因：\n\n- 开发环境与pc端的线上环境，所处的浏览器都登录了<code>有道云笔记</code>的账号，在登录状态下是可以加载<code>有道云笔记</code>域名下的资源的。\n- 手机端因为没有登录过<code>有道云笔记</code>，或许是因为跨域的原因，一直无法获取到图片的资源。\n\n如果把图片放在前端/后端的项目里，每次提交文档都要发版，就很麻烦。\n\n如果图片托管到比如<code>七牛云</code>这样的资源平台，不但要花钱，重要的是还要花费<code>时间成本/学习成本</code>去新建账号等一系列繁琐的配置工作。\n\n那么，不如自己搭建一个图片服务器好了。\n\n### 解决方案\n\n#### 1.更新 nginx 服务配置文件\n\n文件存放路径如下: <code>/root/webserver/nginx/conf/nginx.conf</code> (可根据自己的服务器自行配置)\n\n添加如下配置，将主域名下的<code>/image/</code>路由，映射到<code>/root/image/</code>目录下：\n\n```\nlocation /image/ {\n  root  /root/;\n  autoindex on;\n}\n```\n随后重启 nginx 服务: <code>systemctl restart nginx.service</code>\n\n可以通过<code>scp</code>脚本，或<code>ftp</code>工具，上传图片文件到指定目录，\n\n通过访问<code>xxx.com/image/some-file.png</code>来验证是否配置成功。\n\n#### 2.nodejs 支持图片上传服务\n\n本项目使用<code>koa</code>支持后台系统，需要在项目中引入<code>koa-body</code>依赖，并提供文件上传服务：\n\n#####  iTerm2：\n\n```\nyarn add koa-body\n```\n\n\n##### nodeJs：\n\n```\nconst koaBody = require('koa-body')\n\n...\n\n// 文件上传服务\nrouter.post('/xxx/upload', (ctx, next) => {\n  const file = ctx.request.files.file\n  const reader = fs.createReadStream(file.path);\n  const fileName = `${new Date().valueOf()}.${file.name.split('.')[1]}`\n  const stream = fs.createWriteStream(`./image/${fileName}`)\n  reader.pipe(stream)\n\n  ctx.body = {\n    status: true,\n    data: { src: `http://xxx.com/image/${fileName}` },\n    message: '请求成功'\n  }\n})\n\n...\n\napp.use(koaBody({ multipart: true }))\n```\n\n#### 3.前端页面开发\n\n本项目引入了<code>ant design</code>，可以直接使用其<code>Upload</code>组件，无需自己封装上传工具。\n\n通过<code>Upload</code>组件，调用在步骤2中提供的<code>文件上传服务</code>，可以获得文件在服务器端的保存地址。\n\n随后在编辑文档时，通过<code>markdown</code>的<code>![]('http://xxx.com/image/some-image.png')</code>语法即可插入图片。\n\n"}}